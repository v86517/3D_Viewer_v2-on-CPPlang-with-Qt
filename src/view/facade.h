#ifndef VIEW_FACADE_H
#define VIEW_FACADE_H

/**
 * @file facade.h
 * @brief Фасад для упрощения работы с трансформациями 3D модели
 */

#include <QObject>
#include <QSlider>
#include <QString>
#include <cmath>

QT_BEGIN_NAMESPACE
namespace Ui {
class View;
}
QT_END_NAMESPACE

namespace s21 {

/**
 * @brief Структура для хранения текущего состояния трансформаций
 *
 * Содержит все параметры трансформации модели для отслеживания
 * текущего состояния и вычисления дельт при изменениях.
 *
 * @details Используется фасадом для:
 * - Сохранения текущих значений всех трансформаций
 * - Вычисления приращений при движении слайдеров
 * - Предотвращения накопления ошибок округления
 *
 * Все значения инициализируются нейтральными состояниями,
 * соответствующими отсутствию трансформаций.
 */
struct TransformInfo {
  double move_x = 0.0;  ///< Текущее смещение по оси X в единицах модели
  double move_y = 0.0;  ///< Текущее смещение по оси Y в единицах модели
  double move_z = 0.0;  ///< Текущее смещение по оси Z в единицах модели
  double rotate_x = 0.0;  ///< Текущий угол поворота вокруг оси X в градусах
  double rotate_y = 0.0;  ///< Текущий угол поворота вокруг оси Y в градусах
  double rotate_z = 0.0;  ///< Текущий угол поворота вокруг оси Z в градусах
  double scale =
      0.0;  ///< Текущий коэффициент масштабирования (0.0 = не инициализирован)
};

/**
 * @brief Фасад для упрощения управления трансформациями 3D модели
 *
 * Класс Facade реализует паттерн проектирования "Фасад", предоставляя
 * упрощённый интерфейс для сложной системы трансформации 3D объектов.
 * Скрывает детали вычисления дельт трансформаций и преобразования
 * значений слайдеров в параметры для контроллера.
 *
 * @details Основные возможности:
 * - Обработка изменений слайдеров трансформации
 * - Вычисление приращений (дельт) для каждого типа трансформации
 * - Преобразование значений UI в параметры бизнес-логики
 * - Отслеживание текущего состояния всех трансформаций
 * - Эмиссия унифицированных сигналов для контроллера
 *
 * Фасад отделяет представление (UI слайдеры) от бизнес-логики
 * (контроллер и модель), обеспечивая слабую связность компонентов.
 *
 * @example
 * @code
 * Facade facade(ui, parent);
 *
 * // Подключение к контроллеру
 * connect(&facade, &Facade::SetTransform,
 *         controller, &Controller::TransformModel);
 *
 * // Обработка движения слайдера
 * facade.Transform(ui->horizontalSlider_move_x);
 * @endcode
 *
 * @see TransformInfo
 * @see Controller::TransformModel()
 * @note Реализует паттерн "Фасад" из Gang of Four
 */
class Facade : public QObject {
  Q_OBJECT

 public:
  /**
   * @brief Конструктор фасада
   *
   * Инициализирует фасад с указателем на UI объект для доступа
   * к элементам управления трансформациями.
   *
   * @param ui Указатель на UI объект с элементами управления
   * @param parent Родительский QObject для управления памятью Qt
   *
   * @pre ui не должен быть nullptr
   * @post Фасад готов к обработке трансформаций
   * @post transform_info_ инициализирован нулевыми значениями
   */
  explicit Facade(Ui::View* ui, QObject* parent = nullptr);

  /**
   * @brief Деструктор по умолчанию
   */
  ~Facade() = default;

  /**
   * @brief Обрабатывает изменение любого слайдера трансформации
   *
   * Универсальный метод для обработки всех типов трансформаций.
   * Определяет тип слайдера по его имени объекта и вызывает
   * соответствующий специализированный метод обработки.
   *
   * @param slider Указатель на изменившийся слайдер
   *
   * @pre slider не должен быть nullptr
   * @pre slider должен иметь корректное objectName()
   * @post Соответствующий метод трансформации вызван
   * @post При необходимости испущен сигнал SetTransform
   *
   * @see MoveModel()
   * @see RotateModel()
   * @see ScaleModel()
   */
  void Transform(QSlider* slider);

 signals:
  /**
   * @brief Сигнал запроса применения трансформации к модели
   *
   * Испускается при изменении пользователем любого слайдера
   * трансформации. Содержит унифицированные параметры для
   * контроллера в формате, независимом от UI представления.
   *
   * @param strategy_type Тип стратегии трансформации:
   *   - 0 (kMove) - перемещение
   *   - 1 (kRotate) - поворот
   *   - 2 (kScale) - масштабирование
   * @param value Значение трансформации:
   *   - Для перемещения: приращение смещения
   *   - Для поворота: приращение угла в градусах
   *   - Для масштабирования: коэффициент изменения масштаба
   * @param axis Ось применения трансформации:
   *   - 0 (kX) - ось X
   *   - 1 (kY) - ось Y
   *   - 2 (kZ) - ось Z
   *   - Для масштабирования: значение игнорируется
   *
   * @emit Контроллер получает запрос на трансформацию модели
   *
   * @see Controller::TransformModel()
   */
  void SetTransform(int strategy_type, double value, int axis);

 private:
  /**
   * @brief Обрабатывает слайдеры перемещения модели
   */
  void MoveModel(QString& slider_name);

  /**
   * @brief Обрабатывает слайдеры поворота модели
   */
  void RotateModel(QString& slider_name);

  /**
   * @brief Обрабатывает слайдер масштабирования модели
   */
  void ScaleModel(QString& slider_name);

  Ui::View* ui_;
  TransformInfo transform_info_;
};

}  // namespace s21

#endif  // VIEW_FACADE_H

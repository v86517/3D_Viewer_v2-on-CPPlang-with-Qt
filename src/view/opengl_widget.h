#ifndef OPENGL_WIDGET_H
#define OPENGL_WIDGET_H

/**
 * @file opengl_widget.h
 * @brief OpenGL виджет для отображения 3D моделей в каркасном режиме
 */

#include <QOpenGLFunctions>
#include <QOpenGLWidget>
#include <QPoint>
#include <vector>

class QMouseEvent;
class QWheelEvent;
class QDropEvent;

namespace s21 {

/**
 * @brief Виджет OpenGL для интерактивного отображения 3D моделей
 *
 * Класс OpenGLWidget наследует от QOpenGLWidget и реализует систему
 * отображения 3D моделей в каркасном режиме с поддержкой интерактивных
 * манипуляций через мышь и drag&drop операции.
 *
 * @details Основные возможности:
 * - Отображение 3D моделей в каркасном режиме (wireframe)
 * - Интерактивное вращение модели с помощью мыши
 * - Масштабирование колёсиком мыши
 * - Drag&drop загрузка OBJ файлов
 * - Программное управление трансформациями
 * - Автоматическая инициализация OpenGL контекста
 *
 * Виджет использует устаревший OpenGL API (glBegin/glEnd) для
 * простоты реализации и совместимости со старыми системами.
 * Отображение происходит в реальном времени без буферизации вершин.
 *
 * @example
 * @code
 * OpenGLWidget* widget = new OpenGLWidget(parent);
 *
 * // Установка данных модели
 * widget->SetModelData(vertex_indices, vertex_coords,
 *                      index_count, coord_count);
 *
 * // Программная установка трансформаций
 * widget->SetRotation(45.0f, 0.0f, 0.0f);
 * widget->SetScale(1.5f);
 *
 * // Подключение drag&drop
 * connect(widget, &OpenGLWidget::fileDropped,
 *         this, &View::HandleFileDropped);
 * @endcode
 *
 * @see QOpenGLWidget
 * @see QOpenGLFunctions
 * @note Требует инициализированного OpenGL контекста
 * @warning Использует устаревший OpenGL API для совместимости
 */
class OpenGLWidget : public QOpenGLWidget, protected QOpenGLFunctions {
  Q_OBJECT

 public:
  /**
   * @brief Конструктор OpenGL виджета
   *
   * Инициализирует виджет с базовыми настройками отображения
   * и интерактивности. Устанавливает минимальный размер и
   * включает поддержку drag&drop операций.
   *
   * @param parent Родительский виджет для управления памятью Qt
   *
   * @post Виджет готов к отображению 3D моделей
   * @post Drag&drop операции включены
   * @post Минимальный размер установлен на 800x600
   * @post Все трансформации сброшены в нейтральное состояние
   */
  explicit OpenGLWidget(QWidget* parent = nullptr);

  /**
   * @brief Деструктор по умолчанию
   */
  ~OpenGLWidget() = default;

  /**
   * @brief Устанавливает данные 3D модели для отображения
   *
   * Принимает массивы данных модели и сохраняет указатели
   * для использования в процессе рендеринга. Автоматически
   * обновляет отображение.
   *
   * @param vertex_index Массив индексов вершин для рёбер (пары индексов)
   * @param vertex_coord Массив координат вершин (x,y,z последовательно)
   * @param count_vertex_index Количество элементов в массиве индексов
   * @param count_vertex_coord Количество элементов в массиве координат
   *
   * @pre vertex_index и vertex_coord не должны быть nullptr при count > 0
   * @pre count_vertex_index должен быть чётным (пары индексов рёбер)
   * @pre count_vertex_coord должен быть кратным 3 (группы x,y,z)
   * @post Модель готова к отображению
   * @post update() вызван для перерисовки
   *
   * @warning Виджет не владеет данными, указатели должны оставаться валидными
   * @see paintGL()
   */
  void SetModelData(int* vertex_index, double* vertex_coord,
                    int count_vertex_index, int count_vertex_coord);

  /**
   * @brief Обрабатывает нажатие кнопки мыши (публичная обёртка)
   *
   * Публичный интерфейс для внешней обработки событий мыши.
   * Позволяет родительским виджетам перенаправлять события.
   *
   * @param event Событие нажатия кнопки мыши
   *
   * @post Событие обработано внутренним обработчиком
   * @see mousePressEvent()
   */
  void HandleMousePress(QMouseEvent* event);

  /**
   * @brief Обрабатывает движение мыши (публичная обёртка)
   *
   * Публичный интерфейс для внешней обработки движения мыши.
   * Используется для перенаправления событий от родительских виджетов.
   *
   * @param event Событие движения мыши
   *
   * @post Событие обработано внутренним обработчиком
   * @see mouseMoveEvent()
   */
  void HandleMouseMove(QMouseEvent* event);

  /**
   * @brief Обрабатывает отпускание кнопки мыши (публичная обёртка)
   *
   * Публичный интерфейс для внешней обработки отпускания кнопок мыши.
   * Завершает интерактивные операции, начатые нажатием.
   *
   * @param event Событие отпускания кнопки мыши
   *
   * @post Событие обработано внутренним обработчиком
   * @see mouseReleaseEvent()
   */
  void HandleMouseRelease(QMouseEvent* event);

  /**
   * @brief Обрабатывает прокрутку колёсика мыши (публичная обёртка)
   *
   * Публичный интерфейс для внешней обработки событий колёсика.
   * Используется для интерактивного масштабирования модели.
   *
   * @param event Событие прокрутки колёсика мыши
   *
   * @post Событие обработано внутренним обработчиком
   * @see wheelEvent()
   */
  void HandleWheel(QWheelEvent* event);

  /**
   * @brief Обрабатывает drag&drop операции (публичная обёртка)
   *
   * Публичный интерфейс для внешней обработки drag&drop.
   * Позволяет программно инициировать обработку перетаскивания файлов.
   *
   * @param event Событие перетаскивания
   *
   * @post Событие обработано внутренним обработчиком
   * @see dropEvent()
   */
  void HandleDrop(QDropEvent* event);

 protected:
  /**
   * @brief Инициализирует OpenGL контекст и настройки рендеринга
   *
   * Вызывается Qt автоматически при создании OpenGL контекста.
   * Настраивает базовые параметры рендеринга и включает
   * необходимые возможности OpenGL.
   *
   * @post OpenGL функции инициализированы
   * @post Установлен цвет очистки фона
   * @post Включён тест глубины
   *
   * @see QOpenGLWidget::initializeGL()
   */
  void initializeGL() override;

  /**
   * @brief Обрабатывает изменение размера виджета
   *
   * Вызывается Qt автоматически при изменении размеров виджета.
   * Обновляет область отображения OpenGL (viewport) для
   * соответствия новым размерам.
   *
   * @param w Новая ширина виджета в пикселях
   * @param h Новая высота виджета в пикселях
   *
   * @post Viewport обновлён до новых размеров
   * @post Соотношение сторон сохранено
   *
   * @see QOpenGLWidget::resizeGL()
   */
  void resizeGL(int w, int h) override;

  /**
   * @brief Выполняет отрисовку 3D модели
   *
   * Основной метод рендеринга, вызываемый Qt для отображения
   * содержимого виджета. Применяет трансформации и отрисовывает
   * модель в каркасном режиме.
   *
   * @pre OpenGL контекст инициализирован
   * @pre Данные модели установлены через SetModelData()
   * @post Модель отрисована с текущими трансформациями
   * @post Буферы OpenGL очищены и готовы к следующему кадру
   *
   * @details Последовательность рендеринга:
   * 1. Очистка буферов цвета и глубины
   * 2. Сброс матрицы трансформации
   * 3. Применение смещения, поворотов и масштабирования
   * 4. Отрисовка рёбер модели как линий
   *
   * @see QOpenGLWidget::paintGL()
   * @see SetModelData()
   */
  void paintGL() override;

  /**
   * @brief Обрабатывает нажатие кнопки мыши
   *
   * Начинает интерактивную операцию вращения модели при
   * нажатии левой кнопки мыши. Сохраняет начальную позицию
   * для вычисления перемещения.
   *
   * @param event Событие нажатия кнопки мыши
   *
   * @post При нажатии левой кнопки: mouse_pressed_ = true
   * @post Сохранена начальная позиция мыши
   *
   * @see mouseMoveEvent()
   * @see mouseReleaseEvent()
   */
  void mousePressEvent(QMouseEvent* event) override;

  /**
   * @brief Обрабатывает движение мыши для вращения модели
   *
   * При зажатой левой кнопке мыши поворачивает модель
   * согласно движению курсора. Обеспечивает интуитивное
   * управление ориентацией модели.
   *
   * @param event Событие движения мыши
   *
   * @pre mouse_pressed_ должен быть true для обработки
   * @post Углы поворота обновлены согласно движению мыши
   * @post update() вызван для перерисовки
   * @post Позиция мыши обновлена для следующего события
   *
   * @details Преобразование движения мыши в углы поворота:
   * - Горизонтальное движение влияет на поворот вокруг Y
   * - Вертикальное движение влияет на поворот вокруг X
   * - Коэффициент 0.5 обеспечивает комфортную чувствительность
   *
   * @see mousePressEvent()
   */
  void mouseMoveEvent(QMouseEvent* event) override;

  /**
   * @brief Обрабатывает отпускание кнопки мыши
   *
   * Завершает интерактивную операцию вращения модели
   * при отпускании левой кнопки мыши.
   *
   * @param event Событие отпускания кнопки мыши
   *
   * @post При отпускании левой кнопки: mouse_pressed_ = false
   * @post Интерактивное вращение остановлено
   *
   * @see mousePressEvent()
   * @see mouseMoveEvent()
   */
  void mouseReleaseEvent(QMouseEvent* event) override;

  /**
   * @brief Обрабатывает прокрутку колёсика для масштабирования
   *
   * Изменяет коэффициент масштабирования модели на основе
   * направления и величины прокрутки колёсика мыши.
   *
   * @param event Событие прокрутки колёсика мыши
   *
   * @post Коэффициент масштабирования изменён
   * @post Масштаб ограничен диапазоном [0.1, 10.0]
   * @post update() вызван для перерисовки
   *
   * @details Параметры масштабирования:
   * - Деление на 1200.0 обеспечивает плавное изменение
   * - Минимальный масштаб 0.1 (10% от исходного размера)
   * - Максимальный масштаб 10.0 (1000% от исходного размера)
   */
  void wheelEvent(QWheelEvent* event) override;

  /**
   * @brief Обрабатывает перетаскивание файлов на виджет
   *
   * Извлекает пути файлов из события drag&drop, проверяет
   * расширение на соответствие .obj формату и испускает
   * сигнал для загрузки модели.
   *
   * @param event Событие перетаскивания файлов
   *
   * @post При корректном OBJ файле: испущен сигнал fileDropped
   * @post Событие принято (acceptProposedAction)
   * @post При некорректном файле: событие игнорировано
   *
   * @see fileDropped()
   */
  void dropEvent(QDropEvent* event) override;

 private:
  // === Данные 3D модели ===
  double* vertex_coord_;  ///< Указатель на массив координат вершин (x,y,z,...)
  int* vertex_index_;  ///< Указатель на массив индексов рёбер (пары индексов)
  int count_vertex_coord_;  ///< Количество элементов в массиве координат
  int count_vertex_index_;  ///< Количество элементов в массиве индексов

  // === Состояние интерактивности ===
  bool mouse_pressed_;  ///< Флаг состояния левой кнопки мыши
  QPoint last_mouse_position_;  ///< Последняя зафиксированная позиция мыши

  // === Параметры трансформации модели ===
  float rotation_x_;  ///< Угол поворота вокруг оси X в градусах
  float rotation_y_;  ///< Угол поворота вокруг оси Y в градусах
  float rotation_z_;  ///< Угол поворота вокруг оси Z в градусах
  float scale_factor_;  ///< Коэффициент масштабирования (1.0 = исходный размер)
  float translate_x_;  ///< Смещение по оси X в единицах модели
  float translate_y_;  ///< Смещение по оси Y в единицах модели
  float translate_z_;  ///< Смещение по оси Z в единицах модели

 signals:
  /**
   * @brief Сигнал о перетаскивании файла на виджет
   *
   * Испускается при успешном drag&drop операции с OBJ файлом.
   * Позволяет внешним компонентам (например, View) обработать
   * загрузку новой модели.
   *
   * @param filepath Полный путь к перетащенному OBJ файлу
   *
   * @emit Внешний обработчик получает запрос на загрузку модели
   *
   * @see dropEvent()
   * @see View::HandleFileDropped()
   */
  void fileDropped(const QString& filepath);
};

}  // namespace s21

#endif  // OPENGL_WIDGET_H
